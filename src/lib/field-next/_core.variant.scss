@use '../core/styles/theme';
@use './token-utils' as *;

@mixin container-variant($variant, $theme: primary) {
  @if $variant == plain {
    @include container-plain($theme);
  } @else if $variant == outlined {
    @include container-outlined($theme);
  } @else if $variant == tonal {
    @include container-tonal($theme);
  } @else if $variant == filled {
    @include container-filled($theme);
  } @else if $variant == raised {
    @include container-raised($theme);
  }
}

@mixin container-plain($theme: primary) {
  @if $theme != primary {
    color: theme.variable($theme);
  }
}

@mixin container-outlined($theme: primary) {
  outline-style: #{token(border-style)};
  outline-width: #{token(border-width)};

  @if $theme == primary {
    outline-color: #{token(border-color)};
  } @else {
    outline-color: theme.variable($theme);
  }
}

@mixin container-tonal($theme: primary) {
  @if $theme == primary {
    background: #{token(tonal-surface-color)};
    color: #{token(tonal-on-surface-color)};
  } @else {
    background: theme.variable(#{$theme}-container);
    color: theme.variable(on-#{$theme}-container);
  }
}

@mixin container-filled($theme: primary) {
  outline-style: #{token(border-style)};
  outline-width: #{token(border-width)};

  @if $theme == primary {
    outline-color:  #{token(border-color)};
    background: #{token(filled-surface-color)};

    color: #{token(filled-on-surface-color)};
  } @else {
    outline-color: theme.variable($theme);
    background: theme.variable(#{$theme}-container);
    
    color: theme.variable(on-#{$theme}-container);
  }
}

@mixin container-raised($theme: primary) {
  box-shadow: #{token(raised-elevation)};

  @if $theme == primary {
    background: #{token(filled-surface-color)};
    color: #{token(filled-on-surface-color)};
  } @else {
    background: theme.variable(#{$theme}-container);
    color: theme.variable(on-#{$theme}-container);
  }
}
