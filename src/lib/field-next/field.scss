@use 'sass:map';
@use './core';
@use '../core/styles/theme';
@use '../focus-indicator';
@use '../state-layer';
@use '../utils/mixins' as utils;
@use './token-utils' as *;

$focus: ':not([disabled]):focus-within';
$hover: ':not([disabled]):hover';
$inline-label: ':where([label-position=inline-start], [label-position=inline-end], :not([label-position]))';

// Maps to look up the selector for a given density, theme, or variant
$densities: (
  extra-small: ':where([density=extra-small], [dense])',
  small: ':not([dense])[density=small]',
  medium: ':not([dense]):where([density=medium], :not([density]))',
  large: ':not([dense])[density=large]',
  extra-large: ':not([dense])[density=extra-large]'
);
$themes: (
  primary: ':where([theme=primary], :not([theme]))',
  secondary: '[theme=secondary]',
  tertiary: '[theme=tertiary]',
  success: '[theme=success]',
  error: '[theme=error]',
  warning: '[theme=warning]',
  info: '[theme=info]'
);
$variants: (
  plain: '[variant=plain]',
  outlined: ':where([variant=outlined], :not([variant]))',
  tonal: '[variant=tonal]',
  filled: '[variant=filled]',
  raised: '[variant=raised]'
);

// Layers

@layer host, base, required, optional, label-position, floating-label, density, variant, hover, focus, invalid;

//
// Host
//

@layer host {
  :host {
    @include core.host-configuration;
  }
  
  :host {
    @include core.host;
  }
  
  :host([hidden]) {
    display: none;
  }
}


//
// Base
//

@layer base {
  .forge-field {
    @include core.configuration;
  }
  
  .forge-field {
    @include core.base;
  
    .container {
      @include core.container;
    }
  
    .label {
      @include core.label;
    }
  }
}

//
// Required
//

@layer required {
  :host([required]) {
    .label::before {
      @include core.label-before;
    }
  }
}

//
// Optional
//

@layer optional {
  :host([optional]) {
    .label::after {
      @include core.label-after;
    }
  }
}

//
// Label position
//

@layer label-position {
  :host([label-position=block-start]) {
    .forge-field {
      @include core.block;
  
      .label {
        @include core.label-block;
      }
    }
  }
  
  :host([label-position=inset]) {
    .label {
      @include core.inset-label;
    }
  }
  
  :host([label-position=none]) {
    .label {
      @include utils.visually-hidden;
    }
  }
}


//
// Floating label
//

@layer floating-label {
  :host([label-position=inset][float-label]) {
    .container {
      ::slotted(input) {
        @include core.slotted-input-inset;
      }
    }
  
    .label {
      @include core.inset-float-label;
    }
  }
}

//
// Density
//

@layer density {
  @each $density, $selector in $densities {
    :host(#{$selector}) {
      .container {
        @include core.container-density($density);
      }
    }
  
    :host([label-position=inset]#{$selector}) {
      .container {
        @include core.container-density($density, true);
      }
  
      .label {
        @include core.inset-label-density($density);
      }
    }
  }
}

//
// Variant
//

@layer variant {
  @each $variant, $variant-selector in $variants {
    @each $theme, $theme-selector in $themes {
      :host(#{$variant-selector}#{$theme-selector}) {
        .container {
          @include core.container-variant($variant, $theme);
        }
      }
    }
  }
}

//
// Hover
//

@layer hover {
  @each $variant, $variant-selector in $variants {
    @each $theme, $theme-selector in $themes {
      :host(#{$hover}#{$variant-selector}#{$theme-selector}) {
        .container {
          @include core.container-hover($variant, $theme);
        }
      }
    }
  }
}

//
// Focus
//

@layer focus {
  @each $variant, $variant-selector in $variants {
    :host(#{$focus}#{$variant-selector}) {
      .container {
        @include core.container-focus($variant);
      }
    }
  }
}

//
// Invalid
//

@layer invalid {
  @each $variant, $variant-selector in $variants {
    :host([invalid]#{$variant-selector}) {
      .container {
        @include core.container-invalid($variant);
      }
    }
  
    :host([invalid]#{$hover}#{$variant-selector}) {
      .container {
        @include core.container-invalid-hover($variant);
      }
    }
  }

  :host([invalid]) {
    .label {
      @include core.label-invalid;
    }
  }
}

//
// Disabled
//

:host([disabled]) {
  .forge-field {
    @include core.field-disabled;
  }
}

//
// Slotted
//

.forge-field {
  .container {
    ::slotted(input) {
      @include core.slotted-input;
    }
  }
}

//
// Focus indicator
//

@each $theme, $selector in $themes {
  forge-focus-indicator {
    @include focus-indicator.provide-theme((
      outward-offset: 0px,
      shape: #{token(shape)}
    ));
  }

  @if $theme != primary {
    :host(#{$selector}) {
      forge-focus-indicator {
        @include focus-indicator.provide-theme((
          color: theme.variable(#{$theme})
        ));
      }
    }
  }
}


:host([invalid]) {
  forge-focus-indicator {
    @include focus-indicator.provide-theme((
      color: #{token(invalid-color)}
    ));
  }
}
